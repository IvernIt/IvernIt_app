// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `soporte.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package soporte;

public abstract class _ModeradorDisp extends Ice.ObjectImpl implements Moderador
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::soporte::Moderador"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void addCliente(ClientePrx cliente)
    {
        addCliente(cliente, null);
    }

    public final void addOficinista(OficinistaPrx oficinista)
    {
        addOficinista(oficinista, null);
    }

    public final void removeCliente(ClientePrx cliente)
    {
        removeCliente(cliente, null);
    }

    public final void removeOficinista(OficinistaPrx oficinista)
    {
        removeOficinista(oficinista, null);
    }

    public final void responderCliente(OficinistaPrx oficinista, String mensaje)
    {
        responderCliente(oficinista, mensaje, null);
    }

    public final void responderOficinista(ClientePrx cliente, String mensaje)
    {
        responderOficinista(cliente, mensaje, null);
    }

    public static Ice.DispatchStatus ___addCliente(Moderador __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ClientePrx cliente;
        cliente = ClientePrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.addCliente(cliente, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___removeCliente(Moderador __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ClientePrx cliente;
        cliente = ClientePrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.removeCliente(cliente, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___addOficinista(Moderador __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        OficinistaPrx oficinista;
        oficinista = OficinistaPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.addOficinista(oficinista, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___removeOficinista(Moderador __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        OficinistaPrx oficinista;
        oficinista = OficinistaPrxHelper.__read(__is);
        __inS.endReadParams();
        __obj.removeOficinista(oficinista, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___responderCliente(Moderador __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        OficinistaPrx oficinista;
        String mensaje;
        oficinista = OficinistaPrxHelper.__read(__is);
        mensaje = __is.readString();
        __inS.endReadParams();
        __obj.responderCliente(oficinista, mensaje, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___responderOficinista(Moderador __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ClientePrx cliente;
        String mensaje;
        cliente = ClientePrxHelper.__read(__is);
        mensaje = __is.readString();
        __inS.endReadParams();
        __obj.responderOficinista(cliente, mensaje, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "addCliente",
        "addOficinista",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "removeCliente",
        "removeOficinista",
        "responderCliente",
        "responderOficinista"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addCliente(this, in, __current);
            }
            case 1:
            {
                return ___addOficinista(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___removeCliente(this, in, __current);
            }
            case 7:
            {
                return ___removeOficinista(this, in, __current);
            }
            case 8:
            {
                return ___responderCliente(this, in, __current);
            }
            case 9:
            {
                return ___responderOficinista(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
